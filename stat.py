#unicode: utf-8
''''



Обединение на условие |, сечение &

TRUE + TRUE = 2

sum(x == 5) - броят на елементите които са равни на 5
sum(1:10) - 55

Главно използваме вектор и data frame

 - Вектор създаване, чрез функцията c. Пример: x = c(1, 2, 3)
 	Може и чрез x = 1:10 и тн
	
	x[вектор от индекси които искаме] -> x[c(1, 2, 3)] или с TRUE И FALSE x[c(TRUE, FLASE, TRUE)]
	когато искаме да пропуснем някой индекс слагаме минус отпре -> x[-c(1, 2)]

	x == 1 - връща вектор от истина или лъжа

	x[x == 1] или x[which(x == 1)] # which връща индексите на изпълнителите на условието

 - Data frame - извадки от данни
 Можем да прочетем data frame от csv, чрез read.csv()
Обобщено това е множество което се съдържа от наименувани вектори с еднаква дължина
df = data.frame(c(1, 2), c(3, 4))
● head() - дава първите 6 реда
● tail() - дава последните 6 реда
● dim() - размерности (вектор от брой редове и брой колони)
● nrow()
● ncol()
● names() -дава имената на колоните (работи не само с df)
------------------------------------------------------------------------------------
функции за: mean, median, min, max, range, var (dispersion), sd (standart deviation)

------------------------------------------------------------------------------------
ДАННИ
 - количествени 
 - качествени (категорни)
   - дискретни
   - непрекъснати

ОПИСВАМЕ:
	КАТЕГОРНИ ЧРЕЗ: таблици, bar chart, pie chart
		Таблици (table(вектор от данни)): честота, относителна честота. Промяна на имена на колоните: names(someTable) = c("someData0", "someData1")
		Factors (factor(вектор от категорни данни)) - различните стойности, които категорните данни могат да заемат, се наричат нива
		barplot(someTable)
		barplot(someTable / length(someVector)) - относителни честоти
		pie(someTable, col = c("someColor", "someColor")) # rainbow

	Количествени данни: 
		- ако приема изборимо много стойности е дискретна
		- ако приема неизброимо - непрекъсната
		Описване: barplot, histogram
		histogram - lines.density
			lines.density - изгладен вариант на хистограмата, лицето под кривата е 1. 
			хистограмата с параметър prob=T - лицето на правоъгълника в интервала е вероятността случайно избрано наблюдение да е в този интервал. Сумата от лицата на всички правоъгълници е 1.
			prob = TRUE
			rug(x)
			simple.freqpoly(x)
			lines(density(x))

			След като вече съществува хистограма, може да добавим следните:
				● плътност на хистограмата - lines(density(faithful$eruptions))
				● да отбележим къде са измерванията - rug(jitter(x))
					○ rug - keyword side се указва дали да ги чертае долу, или горе.
					○ jitter(r) → тогава r = r + runif(n, -a, a)
		Boxplot 


	Хитри функции: fivenum - # min, lower hinge, Median, upper hinge, max
					summary - # min, 1st Qu. Median Mean 3rd Qu. Max.
	Квантили - quantile(данни, вектор с всички квантили, които искаме) quantile(someData, c(.25, .75)) # може и да е само едно число, а не вектор

	Диаграма клони с листа Stem and leaf chart - stem(scores) # scores - вектор с данни

	Преобразуване на Числови в категорни:
	cut(vecor, breaks = c(min(vector, 1, 5, max(vector)))) // breaks цепи на интервали [](](]
 #############################################################################################################################################
 BIVARIATE DATA - т.е. две дании и да ги разлгеждаме какви зависимости имат

 2 КАТЕГОРНИ ДАННИ: 
 	- table - маргинални разпределения - Честотна таблица - prob.table(someTable)
 		Условни разпределения prob.table(someTable, 1(or 2 for col))
 		apply – прилага функция към всеки ред или всяка колона на матрица/таблица. apply(структурата от данни, 1 за редове; 2 за колони, функция, която приема ред/стълб)
 	- barplot - stacked and beside

2 КОЛИЧЕСТВЕНИ ДАННИ:
	- 2 boxplot-a един до друг
	- линейна регресия (с други думи линейна зависимост)
	- stripchart - подаваме dataframe или list
	- violin chart - violin plot - да се разгледат заедно две разпределения simple.violinplot(old, new) simple.violinplot(scale(old), scale(new))
	- коефициент на корелация: Pearson, Spearman
		Pearson - проверка за линейна зависимост - [-1, 1] - cor(x, y)
		Spearman - Спиърман корелацията се дефинира по следния начин: cor(rank(x),rank(y)) Не следи за линейна връзка, а просто дали y расте или намалява с нарастване по x.
	- Scatterplot - plot, curve
		чрез identify цъкаме точки:  identify(x, y, n) x, y - данните от scatterplot
		curve - чертае криваcurve (expr, from = NULL, to = NULL, n = 101, add = FALSE, type = "l", xname = "x", xlab = xname, ylab = NULL, log = NULL, xlim = NULL, ...)
				expr име на функция на x, или израз, който съдържа x. Така резултатът от извикването на този израз с х, са стойностите, които се чертаят на у-
				координатата. Т.е. чертае f(x) = y, като му казваме from =… ,to =…, с keyword arguments, които по подразбиране са от 0 до 1. add – ако е TRUE, добавя към съществуваща графика.
	plot(x, y)
	abline(y~x)
	lm(y~x) - намира линеен модел по данните (т.е. коефициентите a, b)
	abline(коефициенти) - чертае права линия, която приема коефициенти, като трябва да има съществуваща вече графика, защото чартае отгоре ===== simple.lm(x, y)
	Коефициентите може да ги достъпим по два начина:
	model = simple.lm(x, y)
	coef(model) # нещо като официален getter
	model$coef # както казахме, че се достъпват атрибути на обекти

1 КОЛИЧЕСТВЕНА - 1 КАЧЕСТВЕНА
	- boxplot(количественa ~ качествена) formula - a formula, such as y ~ grp, where y is a numeric vector of data values to be split into groups according to the grouping variable grp (usually a factor).
	boxplot(y ~ x) разделя стойностите на y в групи в зависимост от стойностите на x и прави толкова кутии с мустаци (boxplots), колкото различни стойности заема х.


Scale - функция, която скалира данните 



Данни
library("MASS")
data("UScereal")
attach(UScereal)
names(UScereal)
head(UScereal)
rm(...)


 #############################################################################################################################################
ГЕНЕРИРАНЕ НА ДАННИ И ТЕХНИТЕ РАЗПРЕДЕЛЕНИЯ

	- sample(x, n, replace=T) - с връщане Хвърляне на зар: sample(1:6, 10, replace=TRUE) #10 хвърляния на зар. Числа на лотариен билет: sample(1:49, 6) #по подразбиране replace=FALSE

	РАЗПРЕДЕЛЕНИЯ:
	rxxx - генериране
	dxxx - 
	pxxx - 
	qxxx - 
	Равномерно: runif(брой числа, минимална стойност, максимална стойност)
		Това ще ни генерира N на брой числа равномерно разпределени в даден интервал. Т.е. N числа в [a, b], които знаем, че могат да се паднат с еднаква вероятност.
		По подразбиране интервалът е [0,1]

	Нормално разпределение: Генерира N на брой нормално разпределени числа. За да генерира тези числа/експерименти, на R му трябват: средно и стандартно отклонение.
							rnorm(брой числа, средно, стандартно отклонение) По подразбиране средното е 0, а стандартното отклонение 1.

	Биномно разпределение: Разпределението на данните е спрямо успеха при N независими Бернулиеви опита. Бернулиев опит е такъв, при който резултата е или успех или неуспех.
							rbinom(брой проведени експерименти, брой опита в експеримент, вероятност за успех)

	Експоненциално разпределение: Приема параметър, който е 1/mean Примери в истинския живот: надеждност, живот на уред, система Свойство: безпаметност (ще го видите на упражнения)
		Пример: Установено е, че животът на електрическа крушка е експоненциално разпределено. Средно животът е 2500 часа. → параметърът е 1/2500 Синтаксис: rexp(брой числа, параметър)
'''
 option(digits=3) закръгляне